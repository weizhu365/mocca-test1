#!/usr/bin/env python3

<caller>WkngDir = '<caller>_<analysisMode>/'
<caller>TempDir = config['tempDir'].rstrip('/') + '/<caller>_<analysisMode>/'
<var> = config['<var>']

# if the caller is multi-threaded:
i = CALLERS.index("<caller>")
<caller>Nt = config['maxThreads'][i]


# insert caller-specific rules here
'''
Notes for running rules in containers:
- If your inputs/outputs are in subdirectories of your working dir,
you don't need to mess with bind points at all.  Just use the relative
paths.
- If some inputs/outputs are in a totally different path, use the bound
directories to access these ones, following the convention laid out below:
'''
rule <caller>_<rule>:
    input: 
        # outside-container paths and input files
        # you may want to use the functions defined in Snakefile_SV_scaffold to link tumor/normal pairs
    output: 
        # outside-container paths and output files
    params: 
        # inside-container paths and input/output files
        # note that every container has /input/, /output/, /ref/, and /scratch/
        # these get mapped to outside-container paths that you specify in config
    threads: <caller>Nt # if applicable
    singularity: 
        # singularity image
    shell: 
        # commands run using inside-container paths via params section
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...


# end with these two rules, which feed back into the final rules in the scaffold (combine_ann_files and all)
rule <caller>_list_output_files:
    input:
        <caller>WkngDir + 'path/to/{sample}_calls.vcf'
    output:
        temp(parentDir + 'SV_files_for_annotation_<caller>.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule <caller>_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_<caller>.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_<caller>.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample <caller>\\n/" > {output}'