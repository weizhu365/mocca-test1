#!/usr/bin/env python3

svabaWkngDir = 'svaba_de_novo/'
svabaTempDir = config['tempDir'].rstrip('/') + '/svaba_de_novo/'
i = CALLERS.index("svaba")
svabaNt = config['maxThreads'][i]

rule svaba_call:
    input:
        parent2 = get_parent2_bam,
        parent2Index = get_parent2_index,
        parent1 = get_parent1_bam,
        parent1Index = get_parent1_index,
        kid = get_kid_bam,
        kidIndex = get_kid_index,
        # excl = excl,
        ref = ref,
        d = refDir + '/' + refNoExt + '.dict',
        amb = ref + '.amb',
        ann = ref + '.ann',
        bwt = ref + '.bwt',
        fai = ref + '.fai',
        pac = ref + '.pac',
        sa = ref + '.sa'
    output:
        svabaTempDir + 'calls/{sample}.alignments.txt.gz',
        svabaTempDir + 'calls/{sample}.bps.txt.gz',
        svabaTempDir + 'calls/{sample}.contigs.bam',
        svabaTempDir + 'calls/{sample}.discordant.txt.gz',
        svabaTempDir + 'calls/{sample}.log',
        svabaTempDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    threads: svabaNt
    params:
        r = refBindPath + refFile,
        o = tempBindPath + svabaWkngDir + 'calls/',
        p2 = get_parent2_bam_container,
        p1 = get_parent1_bam_container,
        k = get_kid_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:svaba'
    shell:
        'svaba run \
            -p {threads} \
            -G {params.r} \
            -n {params.p2} \
            -n {params.p1} \
            -t {params.k} \
            -a {params.o}{wildcards.sample}'
            # -B {input.excl} \

rule svaba_move_call_files:
    input:
        svabaTempDir + 'calls/{sample}.alignments.txt.gz',
        svabaTempDir + 'calls/{sample}.bps.txt.gz',
        svabaTempDir + 'calls/{sample}.contigs.bam',
        svabaTempDir + 'calls/{sample}.discordant.txt.gz',
        svabaTempDir + 'calls/{sample}.log',
        svabaTempDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    output:
        svabaWkngDir + 'calls/{sample}.alignments.txt.gz',
        svabaWkngDir + 'calls/{sample}.bps.txt.gz',
        svabaWkngDir + 'calls/{sample}.contigs.bam',
        svabaWkngDir + 'calls/{sample}.discordant.txt.gz',
        svabaWkngDir + 'calls/{sample}.log',
        svabaWkngDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    params:
        wDir = svabaWkngDir + 'calls/'
    shell:
        'mv {input} {params.wDir}'

rule svaba_rename:
    '''
    Svaba allows both parents in a trio to be entered as "normal"
    samples, and the proband as "tumor." This means that the "somatic"
    output will be the de novo mutations.
    '''
    input:
        i1 = svabaWkngDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        i2 = svabaWkngDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        i3 = svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        i4 = svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    output:
        o1 = svabaWkngDir + 'calls/{sample}.svaba.denovo.indel.vcf',
        o2 = svabaWkngDir + 'calls/{sample}.svaba.denovo.sv.vcf',
        o3 = svabaWkngDir + 'calls/{sample}.svaba.unfiltered.denovo.indel.vcf',
        o4 = svabaWkngDir + 'calls/{sample}.svaba.unfiltered.denovo.sv.vcf'
    shell:
        'mv {input.i1} {output.o1};'
        'mv {input.i2} {output.o2};'
        'mv {input.i3} {output.o3};'
        'mv {input.i4} {output.o4}'

rule svaba_list_output_files:
    input:
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.denovo.sv.vcf'
    output:
        temp(parentDir + 'SV_files_for_annotation_svaba.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule svaba_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_svaba.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_svaba.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample svaba\\n/" > {output}'
