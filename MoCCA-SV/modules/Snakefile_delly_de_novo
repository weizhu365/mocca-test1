#!/usr/bin/env python3

dellyWkngDir = 'delly_de_novo/'  # this is made within the parentDir (AKA outDir from the config file)

TYPES = ['DEL', 'DUP', 'INV', 'BND', 'INS']

rule delly_call_individual_samples_p1:
    input:
        bam = get_parent1_bam,
        bamIndex = get_parent1_index,
        ref = ref
    output:
        dellyWkngDir + 'calls/{sample}parent1_{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        i = get_parent1_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -o {output} \
            -g {params.r} \
            {params.i}'

rule delly_call_individual_samples_p2:
    input:
        bam = get_parent2_bam,
        bamIndex = get_parent2_index,
        ref = ref
    output:
        dellyWkngDir + 'calls/{sample}parent2_{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        i = get_parent2_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'  ############## will this work with non-chr data?
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -o {output} \
            -g {params.r} \
            {params.i}'

rule delly_call_individual_samples_kid:
    input:
        bam = get_kid_bam,
        bamIndex = get_kid_index,
        ref = ref
    output:
        dellyWkngDir + 'calls/{sample}kid_{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        i = get_kid_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -o {output} \
            -g {params.r} \
            {params.i}'

rule delly_merge_SVs_by_trio:
    '''
    Get a unified call set of preliminary SVs in all three trio
    members.
    '''
    input:
        dellyWkngDir + 'calls/{sample}parent1_{type}.bcf',
        dellyWkngDir + 'calls/{sample}parent2_{type}.bcf',
        dellyWkngDir + 'calls/{sample}kid_{type}.bcf'
    output:
        dellyWkngDir + 'merged_by_trio/{sample}_trio_{type}.bcf'
    params:
        tp = '{type}'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly merge \
            -m 500 \
            -n 1000000 \
            -o {output} \
            -b 500 \
            -r 0.5 \
            {input}'

rule delly_re_genotype_p1:
    '''
    Look again at each preliminary SV from the previous rule,
    and make a call in each trio member.
    '''
    input:
        ref = ref,
        trio = dellyWkngDir + 'merged_by_trio/{sample}_trio_{type}.bcf',
        bam = get_parent1_bam
    output:
        dellyWkngDir + 're-genoytped/{sample}parent1_geno{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        bam = get_parent1_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -g {params.r} \
            -v {input.trio} \
            -o {output} \
            {params.bam}'

rule delly_re_genotype_p2:
    input:
        ref = ref,
        trio = dellyWkngDir + 'merged_by_trio/{sample}_trio_{type}.bcf',
        bam = get_parent2_bam
    output:
        dellyWkngDir + 're-genoytped/{sample}parent2_geno{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        bam = get_parent2_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -g {params.r} \
            -v {input.trio} \
            -o {output} \
            {params.bam}'

rule delly_re_genotype_kid:
    input:
        ref = ref,
        trio = dellyWkngDir + 'merged_by_trio/{sample}_trio_{type}.bcf',
        bam = get_kid_bam
    output:
        dellyWkngDir + 're-genoytped/{sample}kid_geno{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        bam = get_kid_bam_container,
        x = '/delly/excludeTemplates/human.hg19.excl.tsv'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -x {params.x} \
            -g {params.r} \
            -v {input.trio} \
            -o {output} \
            {params.bam}'

rule delly_merge_regeno_by_trio:
    input:
        p1 = dellyWkngDir + 're-genoytped/{sample}parent1_geno{type}.bcf',
        p2 = dellyWkngDir + 're-genoytped/{sample}parent2_geno{type}.bcf',
        kid = dellyWkngDir + 're-genoytped/{sample}kid_geno{type}.bcf'
    output:
        dellyWkngDir + 're-geno_merged_by_trio/{sample}_trio_{type}.bcf'
    singularity:
        'shub://bballew/NGS_singularity_recipes:bcftools_1-9'
    shell:
        'bcftools merge \
            -m id \
            -O b \
            -o {output} \
            {input.kid} {input.p1} {input.p2}'

rule delly_filter_de_novos:
    input:
        dellyWkngDir + 're-geno_merged_by_trio/{sample}_trio_{type}.bcf'
    output:
        dellyWkngDir + 'de_novo/{sample}kid_{type}.vcf'
    singularity: 'shub://bballew/NGS_singularity_recipes:bcftools_1-9'
    shell:
        "bcftools view {input} | awk '$1~/^#/{{print $0; NEXT}} $10!~/^0\/0/ && $11~/^0\/0/ && $12~/0\/0/{{print $0}}' > {output}"

# rule delly_index_bcf:
#     input:
#         dellyWkngDir + 'de_novo/{sample}kid_{type}.bcf'
#     output:
#         dellyWkngDir + 'de_novo/{sample}kid_{type}.bcf.csi'
#     params:
#         i = outputBindPath + dellyWkngDir + 'de_novo/{sample}kid_{type}.bcf'
#     singularity: 'shub://bballew/NGS_singularity_recipes:bcftools_1-9'
#     shell:
#         'bcftools index {params.i}'

rule delly_combine_output:
    input:
        expand(dellyWkngDir + 'de_novo/{{sample}}kid_{type}.vcf', type=TYPES)
    output:
        dellyWkngDir + 'de_novo/{sample}kid_all.txt'
    singularity:
        'shub://bballew/NGS_singularity_recipes:bcftools_1-9'
    shell:
        'bcftools concat -a {input} | sort -k1,1 -k2,2n > {output}'

rule delly_list_output_files:
    input:
        dellyWkngDir + 'de_novo/{sample}kid_all.vcf'
    output:
        temp(parentDir + 'SV_files_for_annotation_delly.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule delly_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_delly.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_delly.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample delly\\n/" > {output}'

