#!/usr/bin/env python3

mantaWkngDir = 'manta_de_novo/'
mantaTempDir = config['tempDir'].rstrip('/') + '/manta_de_novo/'
i = CALLERS.index("manta")
mantaNt = config['maxThreads'][i]

rule manta_filter_p1_bams:
    input:
        p1 = get_parent1_bam
    output:
        filtP1 = mantaWkngDir + 'filtered_bams/{sample}_p1.bam'
    params:
        path = execBindPath + 'scripts/',
        p1 = get_parent1_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.p1} {output.filtP1}'

rule manta_filter_p2_bams:
    input:
        p2 = get_parent2_bam
    output:
        filtP2 = mantaWkngDir + 'filtered_bams/{sample}_p2.bam'
    params:
        path = execBindPath + 'scripts/',
        p2 = get_parent2_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.p2} {output.filtP2}'

rule manta_filter_kid_bams:
    input:
        kid = get_kid_bam
    output:
        filtKid = mantaWkngDir + 'filtered_bams/{sample}_kid.bam'
    params:
        path = execBindPath + 'scripts/',
        kid = get_kid_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.kid} {output.filtKid}'

rule manta_index_filtered_bams:
    input:
        filtP1 = mantaWkngDir + 'filtered_bams/{sample}_p1.bam',
        filtP2 = mantaWkngDir + 'filtered_bams/{sample}_p2.bam',
        filtKid = mantaWkngDir + 'filtered_bams/{sample}_kid.bam'
    output:
        p1 = mantaWkngDir + 'filtered_bams/{sample}_p1.bam.bai',
        p2 = mantaWkngDir + 'filtered_bams/{sample}_p2.bam.bai',
        kid = mantaWkngDir + 'filtered_bams/{sample}_kid.bam.bai'
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        'samtools index {input.filtP1};'
        'samtools index {input.filtP2};'
        'samtools index {input.filtKid}'

rule manta_create_run_script:
    input:
        p1 = mantaWkngDir + 'filtered_bams/{sample}_p1.bam',
        p2 = mantaWkngDir + 'filtered_bams/{sample}_p2.bam',
        kid = mantaWkngDir + 'filtered_bams/{sample}_kid.bam',
        p1_i = mantaWkngDir + 'filtered_bams/{sample}_p1.bam.bai',
        p2_i = mantaWkngDir + 'filtered_bams/{sample}_p2.bam.bai',
        kid_i = mantaWkngDir + 'filtered_bams/{sample}_kid.bam.bai',
        ref = ref,
        fai = ref + '.fai'
    output:
        outFile = mantaTempDir + '{sample}/runWorkflow.py',
        p = mantaTempDir + '{sample}/runWorkflow.py.config.pickle'
    params:
        outParam = tempBindPath + 'manta_de_novo/{sample}',
        ref = refBindPath + refFile
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        'configManta.py \
            --bam {input.kid} \
            --bam {input.p1} \
            --bam {input.p2} \
            --referenceFasta {params.ref} \
            --runDir {params.outParam}'

rule manta_call:
    '''
    '''
    input:
        mantaTempDir + '{sample}/runWorkflow.py',
        mantaTempDir + '{sample}/runWorkflow.py.config.pickle'
    output:
        mantaTempDir + '{sample}/workflow.error.log.txt',
        mantaTempDir + '{sample}/workflow.exitcode.txt',
        mantaTempDir + '{sample}/workflow.warning.log.txt',
        mantaTempDir + '{sample}/workspace/pyflow.data/logs/pyflow_log.txt',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        # mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        # mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv'
    params:
        tempBindPath + 'manta_de_novo/{sample}/runWorkflow.py'
    threads: mantaNt
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        '{params} -m local -j {threads}' 

rule manta_move_call_files:
    input:
        i1 = mantaTempDir + '{sample}/runWorkflow.py',
        i2 = mantaTempDir + '{sample}/runWorkflow.py.config.pickle',
        i3 = mantaTempDir + '{sample}/workflow.error.log.txt',
        i4 = mantaTempDir + '{sample}/workflow.exitcode.txt',
        i5 = mantaTempDir + '{sample}/workflow.warning.log.txt',
        i6 = mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        i7 = mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        i8 = mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        i9 = mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv',
        i10 = mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        i11 = mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        i12 = mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        i13 = mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        i14 = mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        i15 = mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi'#,
        # i16 = mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        # i17 = mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    output:
        mantaWkngDir + '{sample}/runWorkflow.py',
        mantaWkngDir + '{sample}/runWorkflow.py.config.pickle',
        mantaWkngDir + '{sample}/workflow.error.log.txt',
        mantaWkngDir + '{sample}/workflow.exitcode.txt',
        mantaWkngDir + '{sample}/workflow.warning.log.txt',
        mantaWkngDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaWkngDir + '{sample}/results/stats/svLocusGraphStats.tsv',
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi'#,
        # mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz',
        # mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    params:
        wkngDir = mantaWkngDir + '{sample}/',
        wkngDir1 = mantaWkngDir + '{sample}/results/stats/',
        wkngDir2 = mantaWkngDir + '{sample}/results/variants/',
        tempDir1 = mantaTempDir + '{sample}/results/stats/',
        tempDir2 = mantaTempDir + '{sample}/results/variants/'
    shell:
        'mv -t {params.wkngDir} {input.i1} {input.i2} {input.i3} {input.i4} {input.i5};'
        'mv -t {params.wkngDir1} {params.tempDir1}*;'
        'mv -t {params.wkngDir2} {params.tempDir2}*'

rule manta_de_novo_scoring:
    '''
    This step requires the SM tag from the original bam, as this is used
    to name the genotype columns in the vcf.  Currently using pysam to
    get them from the bam when I read in the sample file and make the 
    initial dict (see Snakefile_SV_scaffold).
    '''
    input:
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz'
    output:
        mantaWkngDir + '{sample}/results/variants/diploidSV.de_novo.vcf'
    params:
        i_gunzip = outputBindPath + mantaWkngDir + '{sample}/results/variants/diploidSV.vcf',
        p1 = get_p1_SM,
        p2 = get_p2_SM,
        kid = get_kid_SM
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        'gunzip {input};'
        '/manta-1.4.0.centos6_x86_64/libexec/denovo_scoring.py {params.i_gunzip} {params.kid} {params.p1} {params.p2}'

rule manta_de_novo_filtering:
    input:
        mantaWkngDir + '{sample}/results/variants/diploidSV.de_novo.vcf'
    output:
        mantaWkngDir + '{sample}/results/variants/diploidSV.de_novo_only.vcf'
    shell:
        "awk '$1~/^#/{{print $0; NEXT}} $10~/.*:60$/ && $7~/PASS/{{print $0}}' {input} > {output}"

rule manta_list_output_files:
    input:
        mantaWkngDir + '{sample}/results/variants/diploidSV.de_novo_only.vcf'
    output:
        temp(parentDir + 'SV_files_for_annotation_manta.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule manta_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_manta.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_manta.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample manta\\n/" > {output}'