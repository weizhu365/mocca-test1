#!/usr/bin/env python3

mantaWkngDir = 'manta_TN/'
mantaTempDir = config['tempDir'].rstrip('/') + '/manta_TN/'
i = CALLERS.index("manta")
mantaNt = config['maxThreads'][i]

rule manta_filter_t_bams:
    input:
        t = get_tumor_bam
    output:
        filtT = mantaWkngDir + 'filtered_bams/{sample}_T.bam'
    params:
        path = execBindPath + 'scripts/',
        t = get_tumor_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.t} {output.filtT}'

rule manta_filter_n_bams:
    input:
        n = get_normal_bam
    output:
        filtN = mantaWkngDir + 'filtered_bams/{sample}_N.bam'
    params:
        path = execBindPath + 'scripts/',
        n = get_normal_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.n} {output.filtN}'

rule manta_index_filtered_t_bams:
    input:
        mantaWkngDir + 'filtered_bams/{sample}_T.bam'
    output:
        mantaWkngDir + 'filtered_bams/{sample}_T.bam.bai'
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        'samtools index {input}'

rule manta_index_filtered_n_bams:
    input:
        mantaWkngDir + 'filtered_bams/{sample}_N.bam'
    output:
        mantaWkngDir + 'filtered_bams/{sample}_N.bam.bai'
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        'samtools index {input}'

rule manta_create_run_script:
    input:
        t = mantaWkngDir + 'filtered_bams/{sample}_T.bam',
        tIndex = mantaWkngDir + 'filtered_bams/{sample}_T.bam.bai',
        n = mantaWkngDir + 'filtered_bams/{sample}_N.bam',
        nIndex = mantaWkngDir + 'filtered_bams/{sample}_N.bam.bai',
        ref = ref,
        fai = ref + '.fai'
    output:
        outFile = mantaTempDir + '{sample}/runWorkflow.py',
        p = mantaTempDir + '{sample}/runWorkflow.py.config.pickle'
    params:
        outParam = tempBindPath + 'manta_TN/{sample}',
        ref = refBindPath + refFile
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        'configManta.py \
            --normalBam {input.n} \
            --tumorBam {input.t} \
            --referenceFasta {params.ref} \
            --runDir {params.outParam}'

rule manta_call:
    '''
    There's a long lag time (>>300s) before any of the results/variants
    files start to show up, which snakemake interprets as missing files.
    So, include the pyflow log as input, so that snakemake won't stop
    the pipeline after 300s.

    Need to decide what to do about this step wrt platform independence.
    '''
    input:
        mantaTempDir + '{sample}/runWorkflow.py',
        mantaTempDir + '{sample}/runWorkflow.py.config.pickle'
    output:
        mantaTempDir + '{sample}/workflow.error.log.txt',
        mantaTempDir + '{sample}/workflow.exitcode.txt',
        mantaTempDir + '{sample}/workflow.warning.log.txt',
        mantaTempDir + '{sample}/workspace/pyflow.data/logs/pyflow_log.txt',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv'
    threads: mantaNt
    params:
        tempBindPath + 'manta_TN/{sample}/runWorkflow.py'
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        '{params} -m local -j {threads}' 


rule manta_move_call_files:
    input:
        i1 = mantaTempDir + '{sample}/runWorkflow.py',
        i2 = mantaTempDir + '{sample}/runWorkflow.py.config.pickle',
        i3 = mantaTempDir + '{sample}/workflow.error.log.txt',
        i4 = mantaTempDir + '{sample}/workflow.exitcode.txt',
        i5 = mantaTempDir + '{sample}/workflow.warning.log.txt',
        i6 = mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        i7 = mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        i8 = mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        i9 = mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv',
        i10 = mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        i11 = mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        i12 = mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        i13 = mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        i14 = mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        i15 = mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        i16 = mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        i17 = mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    output:
        mantaWkngDir + '{sample}/runWorkflow.py',
        mantaWkngDir + '{sample}/runWorkflow.py.config.pickle',
        mantaWkngDir + '{sample}/workflow.error.log.txt',
        mantaWkngDir + '{sample}/workflow.exitcode.txt',
        mantaWkngDir + '{sample}/workflow.warning.log.txt',
        mantaWkngDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaWkngDir + '{sample}/results/stats/svLocusGraphStats.tsv',
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    params:
        wkngDir = mantaWkngDir + '{sample}/',
        wkngDir1 = mantaWkngDir + '{sample}/results/stats/',
        wkngDir2 = mantaWkngDir + '{sample}/results/variants/',
        tempDir1 = mantaTempDir + '{sample}/results/stats/',
        tempDir2 = mantaTempDir + '{sample}/results/variants/'
    shell:
        # 'mv -t {params.wkngDir} {input.i1} {input.i2} {input.i3} {input.i4} {input.i5};'
        # 'mv -t {params.wkngDir1} {params.tempDir1}*;'
        # 'mv -t {params.wkngDir2} {params.tempDir2}*'
        'mv -t `dirname {output[0]}` {input.i1} {input.i2} {input.i3} {input.i4} {input.i5};'
        'mv -t `dirname {output[5]}` `dirname {input.i6}`/* ;'
        'mv -t `dirname {output[9]}` `dirname {input.i10}`/* '

rule manta_list_output_files:
    input:
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz'
    output:
        parentDir + 'SV_files_for_annotation_manta.{sample}.txt'
    params:
        path = execDir + 'scripts/'
    # singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        #'pwd; ls -al; cat ./MoCCA-SV/scripts/list_files.sh; ls -al ./MoCCA-SV/scripts; which bash; echo $SHELL; df -h '
        '. {params.path}list_files.sh {input} {wildcards.sample} > {output}'
        #'/exec/scripts/list_files.sh {input} {wildcards.sample} > {output}'
        #'./MoCCA-SV/scripts/list_files.sh {input} {wildcards.sample} > {output}'

rule manta_merge_list:
    input:
        i1 = expand(mantaWkngDir + '{sample}/runWorkflow.py', sample=bamDict.keys()),
        i2 = expand(mantaWkngDir + '{sample}/results/stats/alignmentStatsSummary.txt', sample=bamDict.keys()),
        i3 = expand(mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.tsv', sample=bamDict.keys()),
        i4 = expand(mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.xml', sample=bamDict.keys()),
        i5 = expand(mantaWkngDir + '{sample}/results/stats/svLocusGraphStats.tsv', sample=bamDict.keys()),
        # # don't actually need all these above inputs for this step, but I want a uniform rule all with just the last file so these are here now.
        i6 = expand(parentDir + 'SV_files_for_annotation_manta.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_manta.txt'
    shell:
        'cat {input.i6} | sort | sed "1s/^/sample manta\\n/" > {output}'
