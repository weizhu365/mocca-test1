#!/usr/bin/env python3

dellyWkngDir = 'delly_TN/'  # this is made within the parentDir (AKA outDir from the config file)

TYPES = ['DEL', 'DUP', 'INV', 'BND', 'INS']

rule delly_call:
    input:
        t = get_tumor_bam,
        tIndex = get_tumor_index,
        n = get_normal_bam,
        nIndex = get_normal_index,
        ref = ref
    output:
        dellyWkngDir + 'calls/{sample}_{type}.bcf'
    params:
        tp = '{type}',
        r = refBindPath + refFile,
        t = get_tumor_bam_container,
        n = get_normal_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly call \
            -t {params.tp} \
            -o {output} \
            -g {params.r} \
            {params.n} {params.t}'
            #-x /DCEG/CGF/Bioinformatics/Production/Bari/Struct_var_pipeline_dev/sv_callers/delly/excludeTemplates/human.hg19.excl.tsv \
            # exclude file?

rule delly_create_tsv:
    input:
        t = get_tumor_bam,
        tIndex = get_tumor_index,
        n = get_normal_bam,
        nIndex = get_normal_index
    output:
        dellyWkngDir + 'somatic/{sample}_samples.tsv'
    params:
        path = execBindPath + 'scripts/',
        t = get_tumor_bam_container,
        n = get_normal_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}create_tsv.sh {params.t} tumor {output};'
        '{params.path}create_tsv.sh {params.n} control {output}'
    # tab-delimited sample description file where the first column is the sample id (as in the VCF/BCF file) and the second column is either tumor or control

rule delly_pre_filter:
    input:
        bcf = dellyWkngDir + 'calls/{sample}_{type}.bcf',
        tsv = dellyWkngDir + 'somatic/{sample}_samples.tsv'
    output:
        dellyWkngDir + 'somatic/{sample}_{type}.bcf'
    params:
        tp = '{type}'
    singularity: 'shub://bballew/NGS_singularity_recipes:delly_0-8-1'
    shell:
        'delly filter \
            -f somatic \
            -o {output} \
            -s {input.tsv} \
            {input.bcf}'
            # remove for v 0.8.1: -t {params.tp} \
            # tab-delimited sample description file where the first column is the sample id (as in the VCF/BCF file) and the second column is either tumor or control

rule delly_combine_output:
    input:
        expand(dellyWkngDir + 'somatic/{{sample}}_{type}.bcf', type=TYPES)
    output:
        dellyWkngDir + 'somatic/{sample}_all.txt'
    singularity:
        'shub://bballew/NGS_singularity_recipes:bcftools_1-9'
    shell:
        'bcftools concat -a {input} | sort -k1,1 -k2,2n > {output}'


rule delly_list_output_files:
    input:
        dellyWkngDir + 'somatic/{sample}_all.txt'
    output:
        temp(parentDir + 'SV_files_for_annotation_delly.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule delly_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_delly.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_delly.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample delly\\n/" > {output}'


# rule delly_re_genotype:
#     input:
#     output:
#     shell:
#         'delly call -t DEL -g hg19.fa -v t1.pre.bcf -o geno.bcf -x hg19.excl tumor1.bam control1.bam ... controlN.bam'

# rule delly_post_filter:
#     input:
#     output:
#     shell:
#         'delly filter -t DEL -f somatic -o t1.somatic.bcf -s samples.tsv geno.bcf'