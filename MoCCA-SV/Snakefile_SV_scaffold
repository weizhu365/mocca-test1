#!/usr/bin/env python3

'''
This snakefile collects variables from the config file, makes decisions regarding
which rules/branches of the pipeline need to be included, and then starts running
those rules.
'''

import os
# import pysam

# reference the config file
conf = os.environ.get("conf")

print(conf)

configfile: 'config/config.yaml'

# import variables from the config file
execDir = config['execDir'].rstrip('/') + '/'   # ensure one trailing slash
parentDir = config['outDir'].rstrip('/') + '/'  # ensure one trailing slash
    # the shell script that invokes this snakefile cd's to parentDir, which snakemake then considers the home directory, so it's not necessary to include parentDir in most rules.
CALLERS = config['callers']
ref = config['refGenome']
refFile = os.path.basename(ref)
refDir = os.path.dirname(ref)
refNoExt = os.path.splitext(refFile)[0]
anMode = config['analysisMode']
bamList = config['inFile']
dataDir = config['inDir'].rstrip('/') + '/'  # ensure one trailing slash
outDir = config['outDir'].rstrip('/') + '/'  # ensure one trailing slash
callAndAnnotate = config['runMode']['callAndAnnotate']
callOnly = config['runMode']['callOnly']
annotateOnly = config['runMode']['annotateOnly']
localTempDir = config['tempDir'].rstrip('/') + '/'  # ensure one trailing slash

'''
These are the paths in the singularity containers that I'm binding to.
Note that there is also an /output/ directory in each container if needed.
When snakemake is invoked in the shell script SV_wrapper.sh, these paths
are bound to the local directories specified in config.
'''
inputBindPath = '/input/'   # bound to outside-container inDir from config file
tempBindPath = '/scratch/'  # bound to outside-container tempDir from config file
refBindPath = '/ref/'       # bound to outside-container refGenome path from config file
outputBindPath = '/output/' # bound to outside-container outDir from config file
execBindPath = '/exec/'     # bound to outside-container execDir from config file

# get bam file locations and relationships if applicable (e.g. tumor and normal pairs, family trios, etc)
bamDict = {}         # bam files with outside-container paths pre-pended
containerDict = {}   # same bam files, but with the bound inside-container paths pre-pended
if anMode == 'TN':
    with open(bamList) as f:
        for line in f:
            (pair, tumor, normal) = line.split()
            if pair in bamDict.keys():
                sys.exit('ERROR: duplicate pair IDs detected in' + bamList)
            containerDict[pair] = (inputBindPath + tumor, inputBindPath + normal)
            bamDict[pair] = (dataDir + tumor, dataDir + normal)
elif (anMode == 'germline') or (anMode == 'TO'):
    with open(bamList) as f:
        for line in f:
            (subject, bam) = line.split()
            if subject in bamDict.keys():
                sys.exit('ERROR: duplicate subject IDs detected in' + bamList)
            containerDict[subject] = (inputBindPath + bam)
            bamDict[subject] = (dataDir + bam)
elif anMode == 'de_novo':
    with open(bamList) as f:
        for line in f:
            (family, parent1, parent2, kid) = line.split()
            if family in bamDict.keys():
                sys.exit('ERROR: duplicate family IDs detected in' + bamList)
            # use pysam to retrieve sample tag from bam header:
            p1 = pysam.AlignmentFile(dataDir + parent1, 'rb')
            p2 = pysam.AlignmentFile(dataDir + parent2, 'rb')
            k = pysam.AlignmentFile(dataDir + kid, 'rb')
            p1SM = p1.header['RG'][0]['SM']
            p2SM = p2.header['RG'][0]['SM']
            kSM = k.header['RG'][0]['SM']
            containerDict[family] = (inputBindPath + parent1, inputBindPath + parent2, inputBindPath + kid)
            bamDict[family] = (dataDir + parent1, dataDir + parent2, dataDir + kid, p1SM, p2SM, kSM)

def get_kid_SM(wildcards):
    (p1, p2, k, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return p1SM

def get_p1_SM(wildcards):
    (p1, p2, k, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return p2SM

def get_p2_SM(wildcards):
    (p1, p2, k, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return kSM

# functions to retrieve bam files by relationship (e.g. matching tumor and normal)
'''
All of the following functions take bamDict or containerDict,
which is built from the user's sample file, and return the
appropriate bam file or index.
'''
def get_tumor_bam(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return tumor

def get_tumor_index(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return tumor + '.bai'

def get_normal_bam(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return normal

def get_normal_index(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return normal + '.bai'

def get_tumor_bam_container(wildcards):
    (tumor, normal) = containerDict[wildcards.sample]
    return tumor

def get_normal_bam_container(wildcards):
    (tumor, normal) = containerDict[wildcards.sample]
    return normal

def get_parent1_bam(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return parent1

def get_parent1_index(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return parent1 + '.bai'

def get_parent2_bam(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return parent2

def get_parent2_index(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return parent2 + '.bai'

def get_kid_bam(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return kid

def get_kid_index(wildcards):
    (parent1, parent2, kid, p1SM, p2SM, kSM) = bamDict[wildcards.sample]
    return kid + '.bai'

def get_parent1_bam_container(wildcards):
    (parent1, parent2, kid) = containerDict[wildcards.sample]
    return parent1

def get_parent2_bam_container(wildcards):
    (parent1, parent2, kid) = containerDict[wildcards.sample]
    return parent2

def get_kid_bam_container(wildcards):
    (parent1, parent2, kid) = containerDict[wildcards.sample]
    return kid

def get_bam(wildcards):
    bam = bamDict[wildcards.sample]
    return bam

def get_bam_index(wildcards):
    bam = bamDict[wildcards.sample]
    return bam + '.bai'

def get_bam_container(wildcards):
    bam = containerDict[wildcards.sample]
    return bam


if callOnly: 
    for c in CALLERS:
        include: 'modules/Snakefile_' + c + '_' + anMode
    rule all:
        input:
            parentDir + 'SV_files_for_annotation.txt'
elif callAndAnnotate:
    for c in CALLERS:
        include: 'modules/Snakefile_' + c + '_' + anMode
    include: 'modules/Snakefile_compare_and_annotate'
    rule all:
        input:
            expand(annOutDir + '{caller}/interchromosomal/{sample}.compare.summary', caller=CALLERS, sample=bamDict.keys()),
            expand(annOutDir + '{caller}/intrachromosomal/{sample}_annotated_comparison', caller=CALLERS, sample=bamDict.keys()),
            expand(annOutDir + 'intrachromosomal_SVs_{sample}', sample=bamDict.keys()),
            expand(annOutDir + 'interchromosomal_SVs_{sample}', sample=bamDict.keys())
elif annotateOnly:
    include: 'modules/Snakefile_compare_and_annotate'
    rule all:
        input:
            expand(annOutDir + '{caller}/interchromosomal/{sample}.compare.summary', caller=CALLERS, sample=inputDict.keys()),
            expand(annOutDir + '{caller}/intrachromosomal/{sample}_annotated_comparison', caller=CALLERS, sample=inputDict.keys()),
            expand(annOutDir + 'intrachromosomal_SVs_{sample}', sample=inputDict.keys()),
            expand(annOutDir + 'interchromosomal_SVs_{sample}', sample=inputDict.keys())

if callOnly or callAndAnnotate:
    rule bwa_index_ref:
        '''
        Use relative paths for jobs run in containers.  parentDir is passed to singularity as home.

        If overlay is available and enabled in singularity, then you can dynamically create paths inside
        the container, so you could just bind the path to ref to an identical path within the container.
        However, overlay is not enabled on our system, and we don't know what other people's systems would
        look like.  So, I'm stipulating that you must build a container with certain directories included
        (/input, /output, /ref, and /scratch) and then bind to them.

        It seems like I can put the real paths in the input/output, and mock up the container paths in params 
        and put those in the shell invocation.  This works for making indices for the reference files, but is 
        more complicated for the svaba workflow.
        '''
        input:
            ref
        output:
            ref + '.amb',
            ref + '.ann',
            ref + '.bwt',
            ref + '.pac',
            ref + '.sa'
        params:
            f = refBindPath + refFile
        singularity: 'shub://bballew/NGS_singularity_recipes:bwa_0-7-17'
        shell:
            'bwa index -a bwtsw {params.f}'

    rule fai_index_ref:
        input:
            ref
        output:
            ref + '.fai'
        params:
            f = refBindPath + refFile
        singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
        shell:
            'samtools faidx {params.f}'

    rule dict_index_ref:
        input:
            ref
        output:
            refDir + '/' + refNoExt + '.dict'
        params:
            f = refBindPath + refFile,
            o = refBindPath + refNoExt + '.dict'
        singularity: 'shub://bballew/NGS_singularity_recipes:picard_2-18-15'
        shell:
            'java -jar /bin/picard.jar CreateSequenceDictionary REFERENCE={params.f} OUTPUT={params.o}'

    rule combine_ann_files:
        input:
            expand(parentDir + 'SV_files_for_annotation_{caller}.txt', caller=CALLERS)
        output:
            parentDir + 'SV_files_for_annotation.txt'
        run:
            inputDict = {}
            for file in input:
                with open(file) as f:
                    for line in f:
                        l = line.split()
                        if l[0] in inputDict:
                            inputDict[l[0]].append(l[1])
                        else:
                            inputDict[l[0]] = [l[1]]
            with open(str(output), 'w') as out:
                for key, values in inputDict.items(): 
                    out.write(' '.join([key] + [str(x) for x in values]) + '\n')
